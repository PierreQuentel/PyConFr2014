@title Brython - Python dans le navigateur
@pagenum True

Brython (Python dans le navigateur)
===================================

<h3 style="padding-top:50px;padding-left:100px;">Pierre Quentel 
pierre.quentel@gmail.com</h3>


../..
Pourquoi Brython ?
==================

**Brython (Browser Python) a pour objectif de remplacer Javascript par Python 
comme langage de programmation des navigateurs web**

- Javascript en quasi monopole sur le navigateur et arrive côté serveur 
 (node.js)
 - en pratique les navigateurs ne supportent que Javascript
 - mais le Document Object Model du W3C est explicitement indépendant de tout 
   langage
- syntaxe Javascript plus lourde que Python
- sérieux risque de marginalisation de Python s'il reste absent du navigateur
- HTML5 alternative aux développements natifs iOS / Android

../..
Pourquoi Brython ?
==================

Au lancement du projet (printemps 2012) pas de solution satisfaisante :

- Skulpt : console Python dans le navigateur, mais pas d'API pour programmer 
  des applications Web client

- PyJS (ex-Pyjamas) : port de GWT, cycle de développement plus lourd

../..
Objectifs
=========

Développer en Python aussi simplement qu'en Javascript : code Python intégré
dans la page HTML

    <script type="text/python">
    print("Python c'est mieux que Javascript")
    </script>

une interface compatible avec le Document Object Model

    element = document.getElementById("element_id")

mais avec des alternatives plus pythoniques

    element = document["element_id"]

../..
Utiliser Python dans une page HTML
==================================

<b><pre style="background-color:#FFF;color:#66F;padding:10px;">
&lt;html&gt;

&lt;head&gt;
<br><span style="background-color:#FF0;"> &lt;script src="brython.js"&gt;&lt;/script&gt;
</span>
<br> &lt;/head&gt;

&lt;body <span style="background-color:#FF0;">onload="brython()"</span>&gt;

&lt;script <span style="background-color:#FF0;">type="text/python"</span>&gt;
<br> from browser import alert
<br> alert('coucou !')
<br> &lt;/script&gt;

&lt;/body&gt;

&lt;/html&gt;

</pre></b></blockquote>

../..
Comment ça marche ?
===================

`<script src="brython.js"></script>`

Le script brython.js introduit le nom "brython" dans l'espace de noms 
Javascript

`<body onload="brython()">` 

La fonction `brython()` 

- cherche toutes les balises `<script>` avec le type **text/python**
- génère le code Javascript correspondant
- l'exécute

../..
Quelques exemples
=================

Accès à un élément DOM

    <input id="trace">

Code Python

    from browser import document
    elt = document["trace"]

../..
Quelques exemples
=================

Attacher un gestionnaire d'événement

    <select id="pays">

Code Python

    from browser import document, alert
    
    def change_pays(ev):
        sel = ev.target
        alert(sel.options[sel.selectedIndex].value)
    
    document["pays"].bind('change', change_pays)

../..
Couverture de la syntaxe Python
===============================

**Brython vise une compatibilité à 100% avec Python**

- pas de place pour un nouveau langage intermédiaire entre Python et 
  Javascript
- alignement sur la Référence du Langage Python (syntaxe Python 3)

Couverture de tous les mots-clés (sauf `nonlocal`) et des fonctions et types
intégrés (sauf `memoryview` et `vars`)

Brython supporte :

- toutes les variantes de `import` (y compris intra package)
- l'héritage multiple (algorithme C3)
- les métaclasses
- les générateurs, y compris `yield from`

../..

Couverture de la bibliothèque standard
======================================

Réutilisation de dizaines de modules de la distribution standard Python3 sans 
modification : `datetime, configparser, csv, decimal`, le package 
`unittest`...

Réécriture en Python ou en Javascript de modules écrits en C dans la 
distribution CPython (ceux en Python sont copiés de PyPy)

../..
Interface avec le navigateur
============================

Des modules spécifiques pour gérer l'interaction avec les éléments et les
événements DOM dans le package `browser`

Objets
------

- `document` : accès aux éléments de la page
- `window` : accès au navigateur (géoloc...) et à l'espace de noms 
   Javascript
- `alert` : message d'alerte

Modules
-------

- `browser.html` : balises HTML
- `browser.svg` : dessin vectoriel
- stockage local : `browser.local_storage`
- `browser.ajax`
../..
Module `browser.html`
=====================

Construction d'une boite de sélection à partir d'une liste

    from browser import document, html
        
    pays = ['France', 'Italie', 'Russie']
    
    sel = html.SELECT()
    for _pays in pays:
        sel <= html.OPTION(_pays)
    
    document <= sel

`<=` équivaut à `appendChild()`

../..
Module `browser.html`
=====================

Construction d'une table à partir d'un dictionnaire

    from browser import document, html
    
    capitales = {'France':'Paris', 
        'Italie':'Rome', 
        'Russie':'Moscou'}
    
    table = html.TABLE()
    table <= html.TR(html.TH('Pays')+html.TH('Capitale'))
    for pays, ville in capitales.items():
        table <= html.TR(html.TD(pays)+html.TD(ville))
    
    document <= table

../..
Interface avec Javascript
=========================

Brython possède une interface pour utiliser les librairies Javascript,
par exemple :

- généralistes : `jQuery`
- UI : `jQueryUI`
- animations 3D : `three.js`
- éditeur de programmes : `ace`
- dessin vectoriel : `Raphael`
- graphes : `Highcharts`

Les espaces de noms Javascript et Brython sont strictement séparés

L'interface passe par l'objet `window` du module `browser`
../..
Accès depuis Brython aux librairies Javascript
==============================================

    <html>
    <head>
    <script src="three.min.js"></script>
    <script type="text/javascript" src="brython.js"></script>
    </head>
    
    <body onload="brython()">
    
    <script type="text/python">
    from browser import window
    from javascript import JSConstructor
    
    THREE = window.THREE
    
    cameraC = JSConstructor(THREE.PerspectiveCamera)
    camera = cameraC( 75, 1, 1, 10000 )
    camera.position.z = 1000;
    </script>
    
    </body>
    </html>

`JSConstructor` permet d'utiliser les constructeurs d'objets Javascript comme
des classes Python
../..
Accès depuis Javascript aux objets Python
=========================================

Appel d'une fonction Python depuis une balise

    <button onclick="info(this)">

La fonction `info` est insérée dans l'espace de noms Javascript via l'objet
`window`

    from browser import window
    
    def info(ev):
        alert("clic sur l'élement %s" %ev)
    
    window.info = info

../..
Performances
============
Au démarrage du projet, priorité donnée à la compatibilité Python sur la 
performance

Depuis #6 mois gros travaux d'optimisation (sans compromis sur la 
compatibilité)

<table>
<tr>
<td>Code</td>
<td>
    a = 0
    for i in range(10000000):
        a += 1
</td>

<td>
    a = [0]
    for i in range(1000000):
        a[0]= i
</td>
</tr>

<tr>
<td>CPython 3.3</td>
<td style="text-align:center;">1,45 s</td>
<td style="text-align:center;">0,16 s</td>
</tr>

<tr>
<td>Brython 2.0.0 (19/01/2014)</td>
<td style="text-align:center;">16 s</td>
<td style="text-align:center;">9 s</td>
</tr>

<tr>
<td>Brython 2.1.0 (19/04)</td>
<td style="text-align:center;">14 s</td>
<td style="text-align:center;">12 s</td>
</tr>

<tr>
<td>Brython 2.2.1 (15/09)</td>
<td style="text-align:center;">0,65 s</td>
<td style="text-align:center;">0,25 s</td>
</tr>

</table>

../..
Tester Brython en ligne
=======================

Le site Brython (brython.info) fournit un éditeur en ligne 

et une console interactive

../..
Popularité
==========

Membres au 12/10/2014

- Brython : 211
- Skulpt : 171
- PyJS-users : 199
- PyJS-devel : 16
- RapydScript : 47
- PythonJS : 22

../..
Réponse à "python browser" sur Google
=====================================

<img src="google_python_browser.png" width="600">